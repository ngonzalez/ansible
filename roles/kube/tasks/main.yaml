# kubernetes
---
- name: Upgrade the OS (apt-get dist-upgrade)
  tags: kubernetes
  apt:
    upgrade: dist

# Containerd
- name: Add the overlay module
  tags: kubernetes
  modprobe:
    name: overlay
    state: present

- name: Add the br_netfilter module
  tags: kubernetes
  modprobe:
    name: br_netfilter
    state: present

- name: Add containerd modules config
  tags: kubernetes
  shell: |
    tee /etc/modules-load.d/containerd.conf <<EOF
    overlay
    br_netfilter
    EOF

- name: Reload sysctl
  tags: kubernetes
  shell: sysctl --system

- name: Add containerd config
  tags: kubernetes
  shell: containerd config default>/etc/containerd/config.toml

# Container Runtime Interface
- name: Install apt dependencies
  tags: kubernetes
  apt:
    name:
      - gpg
      - gpg-agent

- name: Download CRIO-O gpg key
  tags: kubernetes
  shell: curl -fsSL https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/Release.key | gpg --dearmor --yes -o /usr/share/keyrings/libcontainers-archive-keyring.gpg
  environment:
    - OS: xUbuntu_20.04

- name: Add CRIO-O apt repository
  tags: kubernetes
  shell: echo "deb [signed-by=/usr/share/keyrings/libcontainers-archive-keyring.gpg] https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
  environment:
    - OS: xUbuntu_20.04

- name: Download CRIO-O gpg key
  tags: kubernetes
  shell: curl -fsSL https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$VERSION/$OS/Release.key | gpg --dearmor --yes -o /usr/share/keyrings/libcontainers-crio-archive-keyring.gpg
  environment:
    - OS: xUbuntu_20.04
    - VERSION: 1.23

- name: Add CRIO-O apt repository
  tags: kubernetes
  shell: echo "deb [signed-by=/usr/share/keyrings/libcontainers-crio-archive-keyring.gpg] https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$VERSION/$OS/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:$VERSION.list
  environment:
    - OS: xUbuntu_20.04
    - VERSION: 1.23

- name: Run the equivalent of "apt-get update" as a separate step
  tags: kubernetes
  apt:
    update_cache: yes

- name: Install CRI-O
  tags: kubernetes
  apt:
    name:
    - cri-o
    - cri-o-runc

- name: Add cgroup config
  tags: kubernetes
  template:
    src: cgroup-manager.conf.j2
    dest: /etc/crio/crio.conf.d/100-cgroup-manager.conf

- name: Add bridge config
  tags: kubernetes
  template:
    src: crio-bridge.conf.j2
    dest: /etc/cni/net.d/100-crio-bridge.conf

- name: Start CRI-O
  tags: kubernetes
  service:
    name: crio
    state: restarted
    daemon_reload: yes

# Kubernetes
- name: Add an apt signing key for Kubernetes
  tags: kubernetes
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Adding apt repository for Kubernetes
  tags: kubernetes
  apt_repository:
    repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    state: present
    filename: kubernetes.list

- name: Install Kubernetes binaries
  tags: kubernetes
  apt:
    name:
    - kubelet
    - kubeadm
    - kubectl

- name: Reset Kubernetes cluster
  tags: kubernetes
  command: kubeadm reset -f --cri-socket /var/run/crio/crio.sock

- name: Pull images
  tags: kubernetes
  command: kubeadm config images pull --cri-socket /var/run/crio/crio.sock

- name: Initialize the Kubernetes cluster
  tags: kubernetes
  command: kubeadm init --apiserver-advertise-address 10.0.2.15 \
                        --apiserver-cert-extra-sans 10.0.2.15 \
                        --cri-socket /var/run/crio/crio.sock \
                        --pod-network-cidr 10.244.0.0/16 \
                        --node-name node-1

- name: Create .kube folder
  tags: kubernetes
  file:
    path: "/home/{{ ansible_user }}/.kube"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755

- name: Copy file with owner and permissions
  tags: kubernetes
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{ ansible_user }}/.kube/config"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0644

# By default, your cluster will not schedule Pods on the control-plane node for security reasons
# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/
- name: Taint node
  tags: kubernetes
  command: kubectl taint nodes --all node-role.kubernetes.io/master-
  become: false

- name: Install the Tigera Calico operator and custom resource definitions
  tags: kubernetes
  command: kubectl create -f https://docs.projectcalico.org/master/manifests/tigera-operator.yaml
  become: false

- name: Install Calico by creating the necessary custom resource
  tags: kubernetes
  command: kubectl create -f https://gist.githubusercontent.com/ngonzalez/2982b3115ed14982318088cf4cc8a415/raw/02f882a2a5570af59dcc36ebc512f2727537b1a3/custom-resources.yaml
  become: false

- name: Create kube flannel run directory
  tags: kubernetes
  file:
    path: /run/flannel
    state: directory
    mode: 0755

- name: Add subnet.env
  tags: kubernetes
  template:
    src: subnet.env.j2
    dest: /run/flannel/subnet.env

- name: Apply kube flannel
  tags: kubernetes
  command: kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
  become: false
