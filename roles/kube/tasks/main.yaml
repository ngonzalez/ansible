# Kubernetes
---
- name: Load kernel module overlay
  tags: kubernetes
  community.general.modprobe:
    name: overlay
    state: present

- name: Load kernel module br_netfilter
  tags: kubernetes
  community.general.modprobe:
    name: br_netfilter
    state: present

- name: Set net.bridge.bridge-nf-call-iptables
  tags: kubernetes
  ansible.posix.sysctl:
    name: net.bridge.bridge-nf-call-iptables
    reload: True
    state: present
    sysctl_set: True
    value: 1

- name: Set net.bridge.bridge-nf-call-ip6tables
  tags: kubernetes
  ansible.posix.sysctl:
    name: net.bridge.bridge-nf-call-ip6tables
    reload: True
    state: present
    sysctl_set: True
    value: 1

- name: Set net.ipv4.ip_forward
  tags: kubernetes
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    reload: True
    state: present
    sysctl_set: True
    value: 1

- name: Add apt signing key
  tags: kubernetes
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Add apt repository
  tags: kubernetes
  apt_repository:
    repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    state: present
    filename: kubernetes.list

- name: Install binaries
  tags: kubernetes
  apt:
    name:
    - kubelet
    - kubeadm
    - kubectl

- name: Reset cluster
  tags: kubernetes
  command: kubeadm reset -f --cri-socket {{ cri_socket }}

- name: Pull images
  tags: kubernetes
  command: kubeadm config images pull --cri-socket {{ cri_socket }}

- name: Initialize cluster
  tags: kubernetes
  command: kubeadm init --apiserver-advertise-address {{ apiserver_advertise_address }} \
                        --apiserver-cert-extra-sans {{ apiserver_advertise_address }} \
                        --cri-socket {{ cri_socket }} \
                        --pod-network-cidr {{ pod_network_cidr }} \
                        --node-name {{ node_name }}

- name: Create .kube folder
  tags: kubernetes
  file:
    path: "/home/{{ ansible_user }}/.kube"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755

- name: Copy configuration file with owner and permissions
  tags: kubernetes
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{ ansible_user }}/.kube/config"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0400
    remote_src: True

- name: Taint node as control-plane
  tags: kubernetes
  become_user: "{{ ansible_user }}"
  command: kubectl taint nodes --all node-role.kubernetes.io/control-plane-

- name: Check if node exists
  tags: kubernetes
  become_user: "{{ ansible_user }}"
  command: kubectl get node {{ node_name }}
  register: nodeexists
  ignore_errors: True
  no_log: True

- name: Debug
  tags: kubernetes
  debug:
    var: nodeexists

# helm
- name: Check if Helm exists
  tags: kubernetes
  stat:
    path: /usr/local/bin/helm
  register: helmexists
  ignore_errors: True
  no_log: True

- name: Download Helm
  tags: kubernetes
  unarchive:
    src: https://get.helm.sh/helm-canary-linux-amd64.tar.gz
    dest: /tmp
    remote_src: True
  when: not helmexists.stat.exists

- name: Install Helm
  tags: kubernetes
  copy:
    src: /tmp/linux-amd64/helm
    dest: /usr/local/bin/helm
    mode: 0751
    remote_src: True
  when: not helmexists.stat.exists

# tigera-operator
- name: Create Tigera Operator Namespace
  tags: kubernetes
  become_user: "{{ ansible_user }}"
  command: kubectl create ns tigera-operator

- name: Add Calico Repository
  tags: kubernetes
  become_user: "{{ ansible_user }}"
  command: helm repo add projectcalico https://projectcalico.docs.tigera.io/charts

- name: Install Tigera Operator
  tags: kubernetes
  become_user: "{{ ansible_user }}"
  command: helm upgrade --install calico projectcalico/tigera-operator --namespace tigera-operator

# calico
- name: Install Calico CNI
  tags: kubernetes
  become_user: "{{ ansible_user }}"
  command: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/master/manifests/calico.yaml

- name: Install Calico Custom Resources
  tags: kubernetes
  become_user: "{{ ansible_user }}"
  command: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/master/manifests/custom-resources.yaml

# dns
- name: Add config for coredns
  tags: kubernetes
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: |
      cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: coredns
          namespace: kube-system
        data:
          Corefile: |
            .:53 {
                errors
                health {
                    lameduck 5s
                }
                ready
                kubernetes link12.ddns.net in-addr.arpa ip6.arpa {
                    pods insecure
                    fallthrough in-addr.arpa ip6.arpa
                    ttl 30
                }
                prometheus :9153
                forward . /etc/resolv.conf
                cache 30
                loop
                reload
                loadbalance
            }
      EOF

- name: Set kube-dns service external IP
  tags: kubernetes
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n kube-system patch svc kube-dns -p '{"spec":{"externalIPs":["{{ apiserver_advertise_address }}"]}}'
