---
- name: Install ffmpeg
  apt:
    name:
      - ffmpeg

- name: Install ruby-dev
  apt:
    name: ruby-dev

- name: Install libpq-dev
  apt:
    name: libpq-dev

- name: Install python3-psycopg2
  apt:
    name:
      - python3-psycopg2

# postgresql
- name: Create postgresql database
  become_user: postgres
  community.general.postgresql_db:
    name: "{{ app_database }}"
    encoding: UTF-8
    lc_collate: en_US.UTF-8
    lc_ctype: en_US.UTF-8
    template: template0

- name: Create postgresql user
  become_user: postgres
  community.general.postgresql_user:
    name: "{{ app_database_username }}"

# app folder
- name: Create application directory
  file:
    path: "{{ app_path }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755

# vault
- name: Include vault vars
  include_vars:
    file: vault.yml
  no_log: True

# ssh
- name: Copy ssh key id_host
  copy:
    content: "{{ debian_sid_id_rsa }}"
    dest: /home/{{ ansible_user}}/.ssh/id_host
    mode: 0600
    owner: "{{ ansible_user }}"
  no_log: True

- name: Copy ssh key id_host.pub
  copy:
    content: "{{ debian_sid_id_rsa_pub }}"
    dest: /home/{{ ansible_user}}/.ssh/id_host.pub
    mode: 0644
    owner: "{{ ansible_user }}"

- name: Add id_host to ssh config
  lineinfile:
    line: " IdentityFile /home/{{ ansible_user }}/.ssh/id_host"
    dest: /home/{{ ansible_user }}/.ssh/config
    mode: 0644
    owner: "{{ ansible_user }}"

- name: Add github to known_hosts
  lineinfile:
    line: "{{ lookup('pipe', 'ssh-keyscan -t rsa github.com') }}"
    dest: /home/{{ ansible_user }}/.ssh/known_hosts
    mode: 0644
    owner: "{{ ansible_user }}"
    create: True

# git
- name: Clone application repository
  become_user: "{{ ansible_user }}"
  git:
    repo: "{{ app_repository }}"
    dest: "{{ app_path }}"

# bundle
- name: Install application bundle dependencies
  apt:
    name:
      - build-essential
      - patch
      - zlib1g-dev
      - liblzma-dev
      - libtag1-dev

- name: Run application bundle
  become_user: "{{ ansible_user }}"
  command: /usr/bin/bundle2.7 install --path=vendor/cache
  args:
    chdir: "{{ app_path }}"

# config
- name: Generate application config file
  template:
    src: app.config.j2
    dest: "{{ app_config_path }}"
    mode: 0644

- name: Generate application env file
  template:
    src: app.env.j2
    dest: "{{ app_environment_path }}"
    mode: 0644

# assets
- name: Precompile assets
  become_user: "{{ ansible_user }}"
  command: source {{ app_config_path }}; /usr/bin/bundle2.7 exec rake assets:precompile
  args:
    chdir: "{{ app_path }}"

# gcp
- name: Include gcp vault vars
  include_vars:
    file: vault_gcp.yml
  no_log: True

- name: Create gcp identify file
  template:
    src: gcp.conf.j2
    dest: "{{ app_gcp_config_path }}"
    mode: 0644

# sunspot-solr
- name: Copy sunspot-solr service file
  template:
    src: sunspot-solr.service.j2
    dest: "{{ app_sunspot_solr_service_file }}"

- name: Copy sunspot-solr target file
  template:
    src: sunspot-solr.target.j2
    dest: "{{ app_sunspot_solr_target_file }}"

- name: Start sunspot-solr
  systemd:
    daemon_reload: True
    state: started
    name: sunspot-solr

# puma
- name: Copy puma service file
  template:
    src: puma.service.j2
    dest: "{{ app_puma_service_file }}"

- name: Copy puma target file
  template:
    src: puma.target.j2
    dest: "{{ app_puma_target_file }}"

- name: Start puma
  systemd:
    daemon_reload: True
    state: started
    name: puma

# sidekiq
- name: Copy sidekiq service file
  template:
    src: sidekiq.service.j2
    dest: "{{ app_sidekiq_service_file }}"

- name: Copy sidekiq target file
  template:
    src: sidekiq.target.j2
    dest: "{{ app_sidekiq_target_file }}"

- name: Start sidekiq
  systemd:
    daemon_reload: True
    state: started
    name: sidekiq
