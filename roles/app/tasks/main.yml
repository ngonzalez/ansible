---
- name: Include inventory
  include_vars: inventory/vars.yaml

# application dependencies
- name: Install application dependencies
  apt:
    name:
      - gpg
      - gpg-agent
      - imagemagick
      - libpq-dev
      - ruby-dev

# gcp
- name: Include google cloud vault vars
  include_vars:
    file: vault_gcp.yml
  no_log: true

- name: Create google cloud key file
  become_user: "{{ ansible_user }}"
  template:
    src: gcp.conf.j2
    dest: "/home/{{ ansible_user }}/gcp.json"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0644

# install google cloud
- name: Add google cloud apt key
  apt_key:
    url: "{{ google_cloud_sdk_packages }}/doc/apt-key.gpg"
    keyring: "{{ google_cloud_sdk_keyring }}"
    state: present

- name: Add google cloud apt repository
  apt_repository:
    repo: deb [signed-by={{ google_cloud_sdk_keyring }}] {{ google_cloud_sdk_packages }} cloud-sdk main
    state: present

- name: Install google cloud sdk
  apt:
    name:
      - google-cloud-sdk
    update_cache: true

# google cloud authenticate
- name: gcloud set project
  become_user: "{{ ansible_user }}"
  command: gcloud config set project {{ gcp_project_id }}

- name: gcloud set account
  become_user: "{{ ansible_user }}"
  command: gcloud config set account {{ gcp_client_email }}

- name: gcloud activate account
  become_user: "{{ ansible_user }}"
  command: "gcloud auth activate-service-account {{ gcp_client_email }} --key-file /home/{{ ansible_user }}/gcp.json"

# google cloud storage
- name: Install google cloud storage gem
  become_user: "{{ ansible_user }}"
  gem:
    name: google-cloud-storage
    state: latest

# ssh
- name: Include ssh vault vars
  include_vars:
    file: vault_ssh.yml
  no_log: true

- name: Copy ssh key id_host
  copy:
    content: "{{ debian_sid_id_rsa }}"
    dest: /home/{{ ansible_user}}/.ssh/id_host
    mode: 0600
    owner: "{{ ansible_user }}"

- name: Copy ssh key id_host.pub
  copy:
    content: "{{ debian_sid_id_rsa_pub }}"
    dest: /home/{{ ansible_user}}/.ssh/id_host.pub
    mode: 0644
    owner: "{{ ansible_user }}"

- name: Add id_host to ssh config
  lineinfile:
    line: " IdentityFile /home/{{ ansible_user }}/.ssh/id_host"
    dest: /home/{{ ansible_user }}/.ssh/config
    mode: 0644
    owner: "{{ ansible_user }}"

- name: Add github to known_hosts
  lineinfile:
    line: "{{ lookup('pipe', 'ssh-keyscan -t rsa github.com') }}"
    dest: /home/{{ ansible_user }}/.ssh/known_hosts
    mode: 0644
    owner: "{{ ansible_user }}"
    create: True

# app folder
- name: Remove application directory
  file:
    path: "{{ app_tmp_path }}"
    state: absent
  no_log: True

- name: Create application directory
  file:
    path: "{{ app_tmp_path }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755

# git
- name: Clone application repository
  become_user: "{{ ansible_user }}"
  git:
    repo: "{{ app_repository }}"
    dest: "{{ app_tmp_path }}"

# vault
- name: Include vault db vars
  include_vars:
    file: vault_db.yml
  no_log: true

- name: Include vault app vars
  include_vars:
    file: vault_app.yml
  no_log: true

# environment
- name: Generate application environment file
  become_user: "{{ ansible_user }}"
  template:
    src: app.env.j2
    dest: "{{ app_tmp_path_backend }}/.env"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0644
  no_log: True

# bundle
- name: Install application bundle dependencies
  apt:
    name:
      - build-essential
      - patch
      - zlib1g-dev
      - liblzma-dev
      - libtag1-dev

- name: Install bundler
  become_user: "{{ ansible_user }}"
  gem:
    name: bundler
    version: "{{ app_bundle_version }}"

- name: Get stats from Gemfile.lock
  stat:
    path: "{{ app_tmp_path_backend }}/Gemfile.lock"
  register: app_gemfile

- set_fact:
    app_bundle_archive_path: "{{ app_bundle_src_path }}-{{ app_gemfile.stat.checksum [:10] }}"
    app_bundle_archive_remote_path: "{{ app_bundle_src_remote_path }}-{{ app_gemfile.stat.checksum [:10] }}"

- name: Generate application bundle helpers
  become_user: "{{ ansible_user }}"
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755
  with_items:
    - { src: bundle_dl.rb.j2, dest: "{{ app_tmp_path_backend }}/bin/download_bundle" }
    - { src: bundle_ul.rb.j2, dest: "{{ app_tmp_path_backend }}/bin/upload_bundle" }
  no_log: True

- name: Check if bundle archive exists
  become_user: "{{ ansible_user }}"
  stat:
    path: "{{ app_bundle_archive_path }}"
  register: archive_bundle
  no_log: True

- name: Download bundle archive
  become_user: "{{ ansible_user }}"
  command: bin/download_bundle
  args:
    chdir: "{{ app_tmp_path_backend }}"
  when: not archive_bundle.stat.exists

- name: Check if bundle archive exists
  become_user: "{{ ansible_user }}"
  stat:
    path: "{{ app_bundle_archive_path }}"
  register: archive_bundle
  no_log: True

- name: Check if bundle temporary folder exists
  become_user: "{{ ansible_user }}"
  stat:
    path: "{{ app_bundle_archive_path }}-temp"
  register: app_bundle_tmp_folder
  no_log: True

- name: Create bundle temporary folder
  file:
    path: "{{ app_bundle_archive_path }}-temp"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755
  when: not app_bundle_tmp_folder.stat.exists

- name: Check if bundle temporary folder exists
  become_user: "{{ ansible_user }}"
  stat:
    path: "{{ app_bundle_archive_path }}-temp"
  register: app_bundle_tmp_folder
  no_log: True

- name: Check if bundle temporary folder is empty
  find:
    paths: "{{ app_bundle_archive_path }}-temp"
  register: filesFound
  no_log: True

- name: Unarchive bundle
  become_user: "{{ ansible_user }}"
  unarchive:
    src: "{{ app_bundle_archive_path }}"
    dest: "{{ app_bundle_archive_path }}-temp"
    remote_src: yes
  when: archive_bundle.stat.exists and filesFound.matched == 0

- name: Remove application vendor cache
  file:
    path: "{{ app_tmp_path_backend }}/vendor/cache"
    state: absent
  no_log: True

- name: Link bundle to application folder
  file:
    src: "{{ app_bundle_archive_path }}-temp"
    dest: "{{ app_tmp_path_backend }}/vendor/cache"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    state: link

- name: bundle install
  become_user: "{{ ansible_user }}"
  command: /usr/bin/bundle3.0 install --path=vendor/cache
  args:
    chdir: "{{ app_tmp_path_backend }}"

- name: Archive bundle
  become_user: "{{ ansible_user }}"
  archive:
    path: "{{ app_bundle_archive_path }}-temp"
    dest: "{{ app_bundle_archive_path }}"
    format: xz
  when: not archive_bundle.stat.exists

- name: Upload bundle
  become_user: "{{ ansible_user }}"
  command: bin/upload_bundle
  args:
    chdir: "{{ app_tmp_path_backend }}"

# yarn
- name: Add yarnpkg apt key
  apt_key:
    url: "{{ yarn_apt_key_url }}"
    state: present

- name: Add yarnpkg apt repository
  apt_repository:
    repo: "deb {{ yarn_repository_url }} stable main"
    state: present
    update_cache: true

- name: Install yarn
  apt:
    name:
      - yarn

# assets
- name: Precompile assets
  shell:
    chdir: "{{ app_tmp_path }}"
    cmd:  /usr/bin/bundle3.0 exec rails assets:precompile

# public folder
- name: Change public folder ownership and permissions
  file:
    path: "{{ app_tmp_path_backend }}/public"
    owner: "{{ nginx_user }}"
    group: "{{ nginx_user }}"
    recurse: yes

# hls
- name: Create hls directory
  file:
    path: "/data{{ app_server_path }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755

- name: Link data volume to tmp folder
  file:
    src: "/data{{ app_server_path }}"
    dest: "/tmp{{ app_server_path }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    state: link

# link to application
- name: Create application directory
  file:
    path: /var/www
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755

- name: Remove application directory
  file:
    path: "{{ app_path }}"
    state: absent
  no_log: True

- name: Move to application folder
  command: mv -f "{{ app_tmp_path }}" "{{ app_path }}"

# database migrations
- name: Run database migrations
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ app_path_backend }}"
    cmd:  /usr/bin/bundle3.0 exec rails db:migrate
  ignore_errors: yes

# puma
- name: Copy puma service file
  template:
    src: puma.service.j2
    dest: "{{ app_puma_service_file }}"

- name: Copy puma target file
  template:
    src: puma.target.j2
    dest: "{{ app_puma_target_file }}"

- name: Start puma
  systemd:
    daemon_reload: True
    state: restarted
    name: puma

# # sidekiq
# - name: Copy sidekiq service file
#   template:
#     src: sidekiq.service.j2
#     dest: "{{ app_sidekiq_service_file }}"
#
# - name: Copy sidekiq target file
#   template:
#     src: sidekiq.target.j2
#     dest: "{{ app_sidekiq_target_file }}"
#
# - name: Start sidekiq
#   systemd:
#     daemon_reload: True
#     state: restarted
#     name: sidekiq
