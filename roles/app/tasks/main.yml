---
# application dependencies
- name: Install application dependencies
  apt:
    name:
      - ffmpeg
      - imagemagick
      - lame
      - ruby-dev
  no_log: True

# ssh
- name: Include ssh vault vars
  include_vars:
    file: vault_ssh.yml
  no_log: True

- name: Copy ssh key id_host
  copy:
    content: "{{ debian_sid_id_rsa }}"
    dest: /home/{{ ansible_user}}/.ssh/id_host
    mode: 0600
    owner: "{{ ansible_user }}"
  no_log: True

- name: Copy ssh key id_host.pub
  copy:
    content: "{{ debian_sid_id_rsa_pub }}"
    dest: /home/{{ ansible_user}}/.ssh/id_host.pub
    mode: 0644
    owner: "{{ ansible_user }}"
  no_log: True

- name: Add id_host to ssh config
  lineinfile:
    line: " IdentityFile /home/{{ ansible_user }}/.ssh/id_host"
    dest: /home/{{ ansible_user }}/.ssh/config
    mode: 0644
    owner: "{{ ansible_user }}"
  no_log: True

- name: Add github to known_hosts
  lineinfile:
    line: "{{ lookup('pipe', 'ssh-keyscan -t rsa github.com') }}"
    dest: /home/{{ ansible_user }}/.ssh/known_hosts
    mode: 0644
    owner: "{{ ansible_user }}"
    create: True
  no_log: True

# app folder
- name: Remove application directory
  file:
    path: "{{ app_path }}"
    state: absent
  no_log: True

- name: Create application directory
  file:
    path: "{{ app_path }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755
  no_log: True

# git
- name: Clone application repository
  become_user: "{{ ansible_user }}"
  git:
    repo: "{{ app_repository }}"
    dest: "{{ app_path }}"

# gcp
- name: Include gcp vault vars
  include_vars:
    file: vault_gcp.yml
  no_log: True

- name: Create gcp identify file
  become_user: "{{ ansible_user }}"
  template:
    src: gcp.conf.j2
    dest: "{{ app_gcp_config_path }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0644
  no_log: True

# bundle
- name: Install application bundle dependencies
  apt:
    name:
      - build-essential
      - patch
      - zlib1g-dev
      - liblzma-dev
      - libtag1-dev
  no_log: True

- name: Install google cloud storage
  become_user: "{{ ansible_user }}"
  gem:
    name: google-cloud-storage
    state: latest

- name: Get stats from Gemfile.lock
  stat:
    path: "{{ app_path }}/Gemfile.lock"
  register: app_gemfile
  no_log: True

- set_fact:
    app_bundle_archive_path: "{{ app_bundle_src_path }}-{{ app_gemfile.stat.checksum [:10] }}"
    app_bundle_archive_remote_path: "{{ app_bundle_src_remote_path }}-{{ app_gemfile.stat.checksum [:10] }}"
  no_log: True

- name: Generate application bundle helpers
  become_user: "{{ ansible_user }}"
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755
  with_items:
    - { src: bundle_dl.rb.j2, dest: "{{ app_path }}/bin/download_bundle" }
    - { src: bundle_ul.rb.j2, dest: "{{ app_path }}/bin/upload_bundle" }
  no_log: True

- name: Download bundle archive
  become_user: "{{ ansible_user }}"
  command: bin/download_bundle
  args:
    chdir: "{{ app_path }}"

- name: Check if bundle archive exists
  become_user: "{{ ansible_user }}"
  stat:
    path: "{{ app_bundle_archive_path }}"
  register: archive_bundle
  no_log: True

- name: Remove bundle directory
  become_user: "{{ ansible_user }}"
  file:
    path: "{{ app_path }}/vendor/cache"
    state: absent
  no_log: True

- name: Create bundle directory
  file:
    path: "{{ app_path }}/vendor/cache"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755
  no_log: True

- name: Unarchive bundle
  become_user: "{{ ansible_user }}"
  unarchive:
    src: "{{ app_bundle_archive_path }}"
    dest: "{{ app_path }}/vendor"
    remote_src: yes
  when: archive_bundle.stat.exists
  no_log: True

- name: Install bundle
  become_user: "{{ ansible_user }}"
  command: /usr/bin/bundle2.7 install --path=vendor/cache
  args:
    chdir: "{{ app_path }}"
  no_log: True

- name: Archive bundle
  become_user: "{{ ansible_user }}"
  archive:
    path: "{{ app_path }}/vendor/cache"
    dest: "{{ app_bundle_archive_path }}"
    format: xz
  when: not archive_bundle.stat.exists
  no_log: True

- name: Upload bundle
  become_user: "{{ ansible_user }}"
  command: bin/upload_bundle
  args:
    chdir: "{{ app_path }}"

# environment
- name: Include pg vault vars
  include_vars:
    file: vault_pg.yml
  no_log: True

- name: Generate application environment file
  become_user: "{{ ansible_user }}"
  template:
    src: app.env.j2
    dest: "{{ app_path }}/.env"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0644
  no_log: True

# yarn
- name: Add yarnpkg apt key
  apt_key:
    url: "{{ yarn_apt_key_url }}"
    state: present
  no_log: True

- name: Add yarnpkg apt repository
  apt_repository:
    repo: "deb {{ yarn_repository_url }} stable main"
    state: present
    update_cache: true
  no_log: True

- name: Install yarn
  apt:
    name:
      - yarn
  no_log: True

# assets
- name: Precompile assets
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ app_path }}"
    cmd:  /usr/bin/bundle2.7 exec rake assets:precompile RAILS_ENV=production
  no_log: True

# public folder
- name: Change public folder ownership and permissions
  file:
    path: "{{ app_path }}/public"
    owner: "{{ nginx_user }}"
    group: "{{ nginx_user }}"
    recurse: yes
  no_log: True

# hls
- name: Create hls directory
  file:
    path: "/tmp{{ app_server_path }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755
  no_log: True

# database backup
- name: Generate database backup helpers
  become_user: "{{ ansible_user }}"
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755
  with_items:
    - { src: pg_dump.rb.j2, dest: "{{ app_path }}/bin/download_pg_dump" }
  no_log: True

- name: Download database backup
  become_user: "{{ ansible_user }}"
  command: bin/download_pg_dump
  args:
    chdir: "{{ app_path }}"

- name: Check if postgresql backup exists
  become_user: "{{ ansible_user }}"
  stat:
    path: "{{ app_pg_dump_archive_path }}"
  register: database_backup
  no_log: True

# - name: Restore postgresql backup
#   become_user: "{{ ansible_user }}"
#   command: "/usr/bin/psql -U {{ postgresql_username }}       \
#                           -h {{ postgresql_host }}           \
#                           -p {{ postgresql_port }}           \
#                           -f {{ database_backup.stat.path }} \
#                           {{ postgresql_database }}"
#   when: database_backup.stat.exists
#   no_log: True
#
# # solr
# - name: Update solr database
#   become_user: "{{ ansible_user }}"
#   command:  /usr/bin/bundle2.7 exec rake data:index RAILS_ENV=production
#
# # redis
# - name: Flush redis db
#   become_user: "{{ ansible_user }}"
#   command: "/usr/bin/redis-cli -d {{ redis_db }}   \
#                                -h {{ redis_host }} \
#                                -p {{ redis_port}}  \
#                                flushall"
#
# # puma
# - name: Copy puma service file
#   template:
#     src: puma.service.j2
#     dest: "{{ app_puma_service_file }}"
#   no_log: True
#
# - name: Copy puma target file
#   template:
#     src: puma.target.j2
#     dest: "{{ app_puma_target_file }}"
#   no_log: True
#
# - name: Start puma
#   systemd:
#     daemon_reload: True
#     state: restarted
#     name: puma
#
# # sidekiq
# - name: Copy sidekiq service file
#   template:
#     src: sidekiq.service.j2
#     dest: "{{ app_sidekiq_service_file }}"
#   no_log: True
#
# - name: Copy sidekiq target file
#   template:
#     src: sidekiq.target.j2
#     dest: "{{ app_sidekiq_target_file }}"
#   no_log: True
#
# - name: Start sidekiq
#   systemd:
#     daemon_reload: True
#     state: restarted
#     name: sidekiq
