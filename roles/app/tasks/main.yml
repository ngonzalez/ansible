---
# application dependencies
- name: Install application dependencies
  apt:
    name:
      - ffmpeg
      - imagemagick
      - lame
      - libpq-dev
      - ruby-dev
  no_log: True

# ssh
- name: Include ssh vault vars
  include_vars:
    file: vault_ssh.yml
  no_log: True

- name: Copy ssh key id_host
  copy:
    content: "{{ debian_sid_id_rsa }}"
    dest: /home/{{ ansible_user}}/.ssh/id_host
    mode: 0600
    owner: "{{ ansible_user }}"
  no_log: True

- name: Copy ssh key id_host.pub
  copy:
    content: "{{ debian_sid_id_rsa_pub }}"
    dest: /home/{{ ansible_user}}/.ssh/id_host.pub
    mode: 0644
    owner: "{{ ansible_user }}"
  no_log: True

- name: Add id_host to ssh config
  lineinfile:
    line: " IdentityFile /home/{{ ansible_user }}/.ssh/id_host"
    dest: /home/{{ ansible_user }}/.ssh/config
    mode: 0644
    owner: "{{ ansible_user }}"
  no_log: True

- name: Add github to known_hosts
  lineinfile:
    line: "{{ lookup('pipe', 'ssh-keyscan -t rsa github.com') }}"
    dest: /home/{{ ansible_user }}/.ssh/known_hosts
    mode: 0644
    owner: "{{ ansible_user }}"
    create: True
  no_log: True

# app folder
- name: Remove application directory
  file:
    path: "{{ app_path }}"
    state: absent
  no_log: True

- name: Create application directory
  file:
    path: "{{ app_path }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755
  no_log: True

# git
- name: Clone application repository
  become_user: "{{ ansible_user }}"
  git:
    repo: "{{ app_repository }}"
    dest: "{{ app_path }}"

# gcp
- name: Include gcp vault vars
  include_vars:
    file: vault_gcp.yml
  no_log: True

- name: Create gcp identify file
  become_user: "{{ ansible_user }}"
  template:
    src: gcp.conf.j2
    dest: "{{ app_gcp_config_path }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0644
  no_log: True

# vault
- name: Include vault db vars
  include_vars:
    file: vault_db.yml
  no_log: True

- name: Include vault app vars
  include_vars:
    file: vault_app.yml
  no_log: True

# environment
- name: Include inventory
  include_vars:
    file: inventory.yml
  no_log: True

- name: Generate application environment file
  become_user: "{{ ansible_user }}"
  template:
    src: app.env.j2
    dest: "{{ app_path }}/.env"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0644
  no_log: True

# google cloud storage
- name: Install google cloud storage
  become_user: "{{ ansible_user }}"
  gem:
    name: google-cloud-storage
    state: latest

# dragonfly
- name: Remove dragonfly folder
  file:
    path: "{{ app_dragonfly_path }}"
    state: absent
  no_log: True

- name: Check if dragonfly archive exists
  become_user: "{{ ansible_user }}"
  stat:
    path: "{{ app_dragonfly_local_file_path }}"
  register: app_dragonfly_local_file
  no_log: True

- name: Generate dragonfly helpers
  become_user: "{{ ansible_user }}"
  template:
    src: assets_dl.rb.j2
    dest: "{{ app_path }}/bin/download_assets"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755
  no_log: True

- name: Download dragonfly archive
  become_user: "{{ ansible_user }}"
  command: bin/download_assets
  args:
    chdir: "{{ app_path }}"
  when: not app_dragonfly_local_file.stat.exists and app_gcp_enabled
  no_log: True

- name: Check if dragonfly temporary folder exists
  become_user: "{{ ansible_user }}"
  stat:
    path: "{{ app_dragonfly_tmp_path }}"
  register: app_dragonfly_tmp_folder
  no_log: True

- name: Extract dragonfly archive
  unarchive:
    src: "{{ app_dragonfly_local_file_path }}"
    dest: "/tmp"
    remote_src: yes
  when: not app_dragonfly_tmp_folder.stat.exists
  no_log: True

- name: Change dragonfly folder ownership
  file:
    path: "{{ app_dragonfly_tmp_path }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    recurse: yes
  no_log: True

- name: Link dragonfly temporary folder to application folder
  file:
    src: "{{ app_dragonfly_tmp_path }}"
    dest: "{{ app_dragonfly_path }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    state: link
  no_log: True

# bundle
- name: Install application bundle dependencies
  apt:
    name:
      - build-essential
      - patch
      - zlib1g-dev
      - liblzma-dev
      - libtag1-dev
  no_log: True

- name: Install bundler
  become_user: "{{ ansible_user }}"
  gem:
    name: bundler
    version: "{{ app_bundle_version }}"
  no_log: True

- name: Get stats from Gemfile.lock
  stat:
    path: "{{ app_path }}/Gemfile.lock"
  register: app_gemfile

- set_fact:
    app_bundle_archive_path: "{{ app_bundle_src_path }}-{{ app_gemfile.stat.checksum [:10] }}"
    app_bundle_archive_remote_path: "{{ app_bundle_src_remote_path }}-{{ app_gemfile.stat.checksum [:10] }}"

- name: Generate application bundle helpers
  become_user: "{{ ansible_user }}"
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755
  with_items:
    - { src: bundle_dl.rb.j2, dest: "{{ app_path }}/bin/download_bundle" }
    - { src: bundle_ul.rb.j2, dest: "{{ app_path }}/bin/upload_bundle" }
  no_log: True

- name: Check if bundle archive exists
  become_user: "{{ ansible_user }}"
  stat:
    path: "{{ app_bundle_archive_path }}"
  register: archive_bundle
  no_log: True

- name: Download bundle archive
  become_user: "{{ ansible_user }}"
  command: bin/download_bundle
  args:
    chdir: "{{ app_path }}"
  when: not archive_bundle.stat.exists
  no_log: True

- name: Check if bundle temporary folder exists
  become_user: "{{ ansible_user }}"
  stat:
    path: "{{ app_bundle_archive_path }}-temp"
  register: app_bundle_tmp_folder
  no_log: True

- name: Create bundle temporary folder
  file:
    path: "{{ app_bundle_archive_path }}-temp"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755
  when: not app_bundle_tmp_folder.stat.exists
  no_log: True

- name: Check if bundle temporary folder is empty
  find:
    paths: "{{ app_bundle_archive_path }}-temp"
  register: filesFound

- name: Unarchive bundle
  become_user: "{{ ansible_user }}"
  unarchive:
    src: "{{ app_bundle_archive_path }}"
    dest: "{{ app_bundle_archive_path }}-temp"
    remote_src: yes
  when: filesFound.matched == 0
  no_log: True

- name: Remove application vendor cache
  file:
    path: "{{ app_path }}/vendor/cache"
    state: absent
  no_log: True

- name: Link bundle to application folder
  file:
    src: "{{ app_bundle_archive_path }}-temp"
    dest: "{{ app_path }}/vendor/cache"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    state: link
  no_log: True

- name: bundle install
  become_user: "{{ ansible_user }}"
  command: /usr/bin/bundle2.7 install --path=vendor/cache
  args:
    chdir: "{{ app_path }}"
  no_log: True

- name: Archive bundle
  become_user: "{{ ansible_user }}"
  archive:
    path: "{{ app_bundle_archive_path }}-temp"
    dest: "{{ app_bundle_archive_path }}"
    format: xz
  when: not archive_bundle.stat.exists
  no_log: True

- name: Upload bundle
  become_user: "{{ ansible_user }}"
  command: bin/upload_bundle
  args:
    chdir: "{{ app_path }}"
  no_log: True

# yarn
- name: Add yarnpkg apt key
  apt_key:
    url: "{{ yarn_apt_key_url }}"
    state: present
  no_log: True

- name: Add yarnpkg apt repository
  apt_repository:
    repo: "deb {{ yarn_repository_url }} stable main"
    state: present
    update_cache: true
  no_log: True

- name: Install yarn
  apt:
    name:
      - yarn
  no_log: True

# spring
- name: Stop spring
  become_user: "{{ ansible_user }}"
  command: /usr/bin/bundle2.7 exec bin/spring stop
  args:
    chdir: "{{ app_path }}"

# database migrations
- name: Run database migrations
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ app_path }}"
    cmd:  /usr/bin/bundle2.7 exec rails db:migrate

# assets
- name: Precompile assets
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ app_path }}"
    cmd:  /usr/bin/bundle2.7 exec rake assets:precompile RAILS_ENV=production
  no_log: True

# public folder
- name: Change public folder ownership and permissions
  file:
    path: "{{ app_path }}/public"
    owner: "{{ nginx_user }}"
    group: "{{ nginx_user }}"
    recurse: yes
  no_log: True

# hls
- name: Create hls directory
  file:
    path: "/tmp{{ app_server_path }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755
  no_log: True

# puma
- name: Copy puma service file
  template:
    src: puma.service.j2
    dest: "{{ app_puma_service_file }}"
  no_log: True

- name: Copy puma target file
  template:
    src: puma.target.j2
    dest: "{{ app_puma_target_file }}"
  no_log: True

- name: Start puma
  systemd:
    daemon_reload: True
    state: restarted
    name: puma

# sidekiq
- name: Copy sidekiq service file
  template:
    src: sidekiq.service.j2
    dest: "{{ app_sidekiq_service_file }}"
  no_log: True

- name: Copy sidekiq target file
  template:
    src: sidekiq.target.j2
    dest: "{{ app_sidekiq_target_file }}"
  no_log: True

- name: Start sidekiq
  systemd:
    daemon_reload: True
    state: restarted
    name: sidekiq
