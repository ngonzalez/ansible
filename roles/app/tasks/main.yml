---
# application dependencies
- name: Install application dependencies
  apt:
    name:
      - ffmpeg
      - ruby-dev

# postgresql
- name: Include pg vault vars
  include_vars:
    file: vault_pg.yml
  no_log: True

# ssh
- name: Include ssh vault vars
  include_vars:
    file: vault_ssh.yml
  no_log: True

- name: Copy ssh key id_host
  copy:
    content: "{{ debian_sid_id_rsa }}"
    dest: /home/{{ ansible_user}}/.ssh/id_host
    mode: 0600
    owner: "{{ ansible_user }}"
  no_log: True

- name: Copy ssh key id_host.pub
  copy:
    content: "{{ debian_sid_id_rsa_pub }}"
    dest: /home/{{ ansible_user}}/.ssh/id_host.pub
    mode: 0644
    owner: "{{ ansible_user }}"
  no_log: True

- name: Add id_host to ssh config
  lineinfile:
    line: " IdentityFile /home/{{ ansible_user }}/.ssh/id_host"
    dest: /home/{{ ansible_user }}/.ssh/config
    mode: 0644
    owner: "{{ ansible_user }}"
  no_log: True

- name: Add github to known_hosts
  lineinfile:
    line: "{{ lookup('pipe', 'ssh-keyscan -t rsa github.com') }}"
    dest: /home/{{ ansible_user }}/.ssh/known_hosts
    mode: 0644
    owner: "{{ ansible_user }}"
    create: True
  no_log: True

# app folder
- name: Remove application directory
  file:
    path: "{{ app_path }}"
    state: absent
  no_log: True

- name: Create application directory
  file:
    path: "{{ app_path }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755
  no_log: True

# git
- name: Clone application repository
  become_user: "{{ ansible_user }}"
  git:
    repo: "{{ app_repository }}"
    dest: "{{ app_path }}"

# gcp
- name: Include gcp vault vars
  include_vars:
    file: vault_gcp.yml
  no_log: True

- name: Create gcp identify file
  become_user: "{{ ansible_user }}"
  template:
    src: gcp.conf.j2
    dest: "{{ app_gcp_config_path }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0644
  no_log: True

# bundle
- name: Install application bundle dependencies
  apt:
    name:
      - build-essential
      - patch
      - zlib1g-dev
      - liblzma-dev
      - libtag1-dev
  no_log: True

- name: Install google cloud storage
  become_user: "{{ ansible_user }}"
  gem:
    name: google-cloud-storage
    state: latest

- name: Download bundle archive
  become_user: "{{ ansible_user }}"
  command: bin/download_bundle
  args:
    chdir: "{{ app_path }}"

- name: Check if bundle archive exists
  become_user: "{{ ansible_user }}"
  stat:
    path: "/home/{{ ansible_user }}/.bundle.tar.bz2"
  register: archive_bundle_exists

- name: Remove bundle directory
  become_user: "{{ ansible_user }}"
  file:
    path: "{{ app_path }}/vendor/cache"
    state: absent
  no_log: True

- name: Create bundle directory
  file:
    path: "{{ app_path }}/vendor/cache"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755
  no_log: True

- name: Unarchive bundle
  become_user: "{{ ansible_user }}"
  unarchive:
    src: "/home/{{ ansible_user }}/.bundle.tar.bz2"
    dest: "{{ app_path }}/vendor"
    remote_src: yes
  when: archive_bundle_exists.stat.exists
  no_log: True

- name: Install bundle
  become_user: "{{ ansible_user }}"
  command: /usr/bin/bundle2.7 install --path=vendor/cache
  args:
    chdir: "{{ app_path }}"
  no_log: True

- name: Archive bundle
  become_user: "{{ ansible_user }}"
  archive:
    path: "{{ app_path }}/vendor/cache"
    dest: "/home/{{ ansible_user }}/.bundle.tar.bz2"
    format: bz2
  when: not archive_bundle_exists.stat.exists
  no_log: True

- name: Upload bundle
  become_user: "{{ ansible_user }}"
  command: bin/upload_bundle
  args:
    chdir: "{{ app_path }}"
  when: not archive_bundle_exists.stat.exists

# config
- name: Generate application config file
  become_user: "{{ ansible_user }}"
  template:
    src: app.conf.j2
    dest: "{{ app_config_path }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0644
  no_log: True

- name: Generate application env file
  become_user: "{{ ansible_user }}"
  template:
    src: app.env.j2
    dest: "{{ app_environment_path }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0644
  no_log: True

# assets
- name: Precompile assets
  become_user: "{{ ansible_user }}"
  command: sh {{ app_config_path }} && /usr/bin/bundle2.7 exec rake assets:precompile
  args:
    chdir: "{{ app_path }}"

# sunspot-solr
- name: Start sunspot-solr
  become_user: "{{ ansible_user }}"
  command: sh {{ app_config_path }} && /usr/bin/bundle2.7 exec rake sunspot:solr:start
  args:
    chdir: "{{ app_path }}"

# puma
- name: Copy puma service file
  template:
    src: puma.service.j2
    dest: "{{ app_puma_service_file }}"

- name: Copy puma target file
  template:
    src: puma.target.j2
    dest: "{{ app_puma_target_file }}"

- name: Start puma
  systemd:
    daemon_reload: True
    state: started
    name: puma

# sidekiq
- name: Copy sidekiq service file
  template:
    src: sidekiq.service.j2
    dest: "{{ app_sidekiq_service_file }}"

- name: Copy sidekiq target file
  template:
    src: sidekiq.target.j2
    dest: "{{ app_sidekiq_target_file }}"

- name: Start sidekiq
  systemd:
    daemon_reload: True
    state: started
    name: sidekiq
