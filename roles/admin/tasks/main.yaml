# App deployment
---
# vault env app-backend
- name: Include vars from vault
  tags: admin
  include_vars: env_vault_backend.yaml
  no_log: True

# vault env app-stream
- name: Include vars from vault
  tags: admin
  include_vars: env_vault_stream.yaml
  no_log: True

# git
- name: Add github to known_hosts
  tags: admin
  lineinfile:
    line: "{{ lookup('pipe', 'ssh-keyscan -t rsa github.com') }}"
    dest: "/home/{{ ansible_user }}/.ssh/known_hosts"
    mode: 0644
    owner: "{{ ansible_user }}"
    create: True

- name: Checkout admin repository
  tags: admin
  git:
    repo: "{{ admin_repository }}"
    dest: "{{ admin_path }}"
    version: dev

# development: namespace
- name: Create development namespace
  tags: admin
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl apply -f namespace/development.yaml

# development: postgresql
- name: Check for previous deployments for postgresql
  tags: admin postgresql
  become_user: "{{ ansible_user }}"
  register: postgresqldeployment
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n development get deployments -o json | jq -r '.items[].spec.template.spec.containers[].name' | grep ^postgresql

- name: Create postgresql deployment
  tags: admin postgresql
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n development replace --force -f deploy/postgresql.yaml
  when: postgresqldeployment == ""

- name: Create postgresql loadbalancer
  tags: admin postgresql
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n development replace --force -f service/postgresql.yaml
  when: postgresqldeployment == ""

- name: Set postgresql loadbalancer external IP
  tags: admin postgresql
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n development patch svc postgresql-loadbalancer -p '{"spec":{"externalIPs":["{{ apiserver_advertise_address }}"]}}'
  when: postgresqldeployment == ""

# development: redis
- name: Check for previous deployments for redis
  tags: admin redis
  become_user: "{{ ansible_user }}"
  register: redisdeployment
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n development get deployments -o json | jq -r '.items[].spec.template.spec.containers[].name' | grep ^redis

- name: Create redis deployment
  tags: admin redis
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n development replace --force -f deploy/redis.yaml
  when: redisdeployment == ""

- name: Create redis loadbalancer
  tags: admin redis
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n development replace --force -f service/redis.yaml
  when: redisdeployment == ""

- name: Set redis loadbalancer external IP
  tags: admin redis
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n development patch svc redis-loadbalancer -p '{"spec":{"externalIPs":["{{ apiserver_advertise_address }}"]}}'
  when: redisdeployment == ""

# development: app-backend
- name: Create app-backend environment configuration
  tags: admin app-backend
  template:
    src: app-backend.env.j2
    dest: /tmp/.env
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0644
  no_log: True

- name: Create app-backend env secret
  tags: admin app-backend
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl create secret generic app-backend-env --namespace=development --from-file=/tmp/.env --dry-run=client -o yaml | kubectl -n development apply -f -

- name: Create app-backend Deployment
  tags: admin app-backend
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n development replace --force -f deploy/app-backend.yaml

- name: Create app-backend loadbalancer
  tags: admin app-backend
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n development replace --force -f service/app-backend.yaml

- name: Set app-backend loadbalancer external IP
  tags: admin app-backend
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n development patch svc app-backend-loadbalancer -p '{"spec":{"externalIPs":["{{ apiserver_advertise_address }}"]}}'

# development: nginx-backend
- name: Create nginx-backend deployment
  tags: admin nginx-backend
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n development replace --force -f deploy/nginx-backend.yaml

- name: Create nginx-backend loadbalancer
  tags: admin nginx-backend
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n development replace --force -f service/nginx-backend.yaml

- name: Set nginx-backend loadbalancer external IP
  tags: admin nginx-backend
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n development patch svc nginx-backend-loadbalancer -p '{"spec":{"externalIPs":["{{ apiserver_advertise_address }}"]}}'

# development: app-stream
- name: Create app-stream environment configuration
  tags: admin app-stream
  template:
    src: app-stream.env.j2
    dest: /tmp/.env
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0644
  no_log: True

- name: Create app-stream env secret
  tags: admin app-stream
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl create secret generic app-stream-env --namespace=development --from-file=/tmp/.env --dry-run=client -o yaml | kubectl -n development apply -f -

- name: Create app-stream deployment
  tags: admin app-stream
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n development replace --force -f deploy/app-stream.yaml

- name: Create app-stream loadbalancer
  tags: admin app-stream
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n development replace --force -f service/app-stream.yaml

- name: Set app-stream loadbalancer external IP
  tags: admin app-stream
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n development patch svc app-stream-loadbalancer -p '{"spec":{"externalIPs":["{{ apiserver_advertise_address }}"]}}'

# development: nginx-stream
- name: Create nginx-stream Deployment
  tags: admin nginx-stream
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n development replace --force -f deploy/nginx-stream.yaml

- name: Create nginx-stream loadbalancer
  tags: admin nginx-stream
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n development replace --force -f service/nginx-stream.yaml

- name: Set nginx-stream loadbalancer external IP
  tags: admin nginx-stream
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n development patch svc nginx-stream-loadbalancer -p '{"spec":{"externalIPs":["{{ apiserver_advertise_address }}"]}}'

# development: nginx-frontend
- name: Create nginx-frontend Deployment
  tags: admin nginx-frontend
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n development replace --force -f deploy/nginx-frontend.yaml

- name: Create nginx-frontend loadbalancer
  tags: admin nginx-frontend
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n development replace --force -f service/nginx-frontend.yaml

- name: Set nginx-frontend loadbalancer external IP
  tags: admin nginx-frontend
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n development patch svc nginx-frontend-loadbalancer -p '{"spec":{"externalIPs":["{{ apiserver_advertise_address }}"]}}'

# development: prometheus-community charts
- name: Add prometheus-community repository
  tags: admin prometheus
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: helm repo add prometheus-community https://prometheus-community.github.io/helm-charts

# development: prometheus-postgres-exporter
- name: Install prometheus-postgres-exporter
  tags: admin prometheus
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: helm upgrade --install -f helm/prometheus-postgres-exporter.yaml prometheus-postgres-exporter prometheus-community/prometheus-postgres-exporter --namespace development

# development: prometheus-redis-exporter
- name: Install prometheus-redis-exporter
  tags: admin prometheus
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: helm upgrade --install -f helm/prometheus-redis-exporter.yaml prometheus-redis-exporter prometheus-community/prometheus-redis-exporter --namespace development

- name: Set prometheus-redis-exporter loadbalancer external IP
  tags: admin prometheus
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n development patch svc prometheus-redis-exporter -p '{"spec":{"externalIPs":["{{ apiserver_advertise_address }}"]}}'

# development: prometheus-nginx-exporter backend
- name: Install prometheus-nginx-exporter backend
  tags: admin prometheus
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: helm upgrade --install -f helm/prometheus-nginx-exporter-backend.yaml prometheus-nginx-exporter-backend prometheus-community/prometheus-nginx-exporter --namespace development

# development: prometheus-nginx-exporter frontend
- name: Install prometheus-nginx-exporter frontend
  tags: admin prometheus
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: helm upgrade --install -f helm/prometheus-nginx-exporter-frontend.yaml prometheus-nginx-exporter-frontend prometheus-community/prometheus-nginx-exporter --namespace development

# development: prometheus-nginx-exporter stream
- name: Install prometheus-nginx-exporter stream
  tags: admin prometheus
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: helm upgrade --install -f helm/prometheus-nginx-exporter-stream.yaml prometheus-nginx-exporter-stream prometheus-community/prometheus-nginx-exporter --namespace development

# development: prometheus
- name: Install prometheus
  tags: admin prometheus
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: helm upgrade --install -f helm/prometheus.yaml prometheus prometheus-community/prometheus --namespace development

# development: node-exporter
- name: Install node-exporter
  tags: admin node-exporter
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: helm upgrade --install -f helm/node-exporter.yaml node-exporter prometheus-community/prometheus-node-exporter --namespace development

# development: grafana
- name: Install grafana
  tags: admin grafana
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: helm upgrade --install -f helm/grafana.yaml grafana grafana/grafana --namespace development

- name: Set grafana loadbalancer external IP
  tags: admin grafana
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n development patch svc grafana -p '{"spec":{"externalIPs":["{{ apiserver_advertise_address }}"]}}'

- name: Login to grafana
  tags: admin grafana-login
  become_user: "{{ ansible_user }}"
  register: grafanapasswd  
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl get secret --namespace development grafana -o jsonpath="{.data.admin-password}" | base64 --decode

- name: Debug
  tags: admin grafana-login
  debug:
    var: grafanapasswd
