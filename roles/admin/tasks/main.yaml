# admin
---
# apt dependencies
- name: Install system packages
  tags: admin
  apt:
    name:
    - curl
    - dnsutils
    - htop
    - iputils-ping
    - jq
    - net-tools

# github
- name: Add github to known_hosts
  tags: admin
  lineinfile:
    line: "{{ lookup('pipe', 'ssh-keyscan -t rsa github.com') }}"
    dest: "/home/{{ ansible_user }}/.ssh/known_hosts"
    mode: 0644
    owner: "{{ ansible_user }}"
    create: True

# git checkout
- name: Checkout admin repository
  tags: admin
  become_user: "{{ ansible_user }}"
  git:
    repo: "{{ admin_repository }}"
    dest: "{{ admin_path }}"
    version: main

# kube-dns
- name: Set kube-dns service external IP
  tags: admin
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n kube-system patch svc kube-dns -p '{"spec":{"externalIPs":["{{ apiserver_advertise_address }}"]}}'

# coredns
- name: Add config for coredns
  tags: admin
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl apply -f configmap/coredns.yaml

# service-account
- name: Setup Service Account Admin User
  tags: admin
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl apply -f service-account/admin-user.yaml

- name: Setup Service Account Cluster Admin
  tags: admin
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl apply -f service-account/cluster-admin.yaml

- name: Generate Service Account Token
  tags: admin
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n kubernetes-dashboard create token admin-user

# development: namespace
- name: Create namespace
  tags: admin
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl apply -f namespace/development.yaml

# development: demodb
- name: Create demodb deployment
  tags: admin
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl apply -f deploy/demodb.yaml

- name: Create demodb loadbalancer
  tags: admin
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl apply -f service/demodb.yaml

- name: Set demodb loadbalancer external IP
  tags: admin
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n development patch svc demodb-loadbalancer -p '{"spec":{"externalIPs":["{{ apiserver_advertise_address }}"]}}'

# development: demoredis
- name: Create demoredis deployment
  tags: admin
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl apply -f deploy/demoredis.yaml

- name: Create demoredis loadbalancer
  tags: admin
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl apply -f service/demoredis.yaml

- name: Set demoredis loadbalancer external IP
  tags: admin
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n development patch svc demoredis-loadbalancer -p '{"spec":{"externalIPs":["{{ apiserver_advertise_address }}"]}}'

# development: demoappbackend
- name: Create app Deployment
  tags: admin
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl apply -f deploy/demoappbackend.yaml

- name: Create app loadbalancer
  tags: admin
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl apply -f service/demoappbackend.yaml

- name: Set app loadbalancer external IP
  tags: admin
  become_user: "{{ ansible_user }}"
  shell:
    chdir: "{{ admin_path }}"
    cmd: kubectl -n k8s patch svc demoappbackend-loadbalancer -p '{"spec":{"externalIPs":["{{ apiserver_advertise_address }}"]}}'
